using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;
using Ektron.Cms;
using Ektron.Cms.Framework;
using Ektron.Cms.Content;
using Ektron.Cms.Common;
using Ektron.Cms.API.Content;
using Ektron.Cms.API;
using Ektron.Cms.WebSearch;
using Ektron.Cms.WebSearch.SearchData;

public partial class _Default : System.Web.UI.Page
{
	Ektron.Cms.API.Search.SearchManager searchapi = new Ektron.Cms.API.Search.SearchManager();
    SearchResponseData[] data = null;
    public List<Series> SeriesList = new List<Series>();
    public List<Filter> FilterOptions1 = new List<Filter>();
    public List<Filter> FilterOptions2 = new List<Filter>();
    public List<Filter> FilterOptions3 = new List<Filter>();
    public List<string> FilterList1 = new List<string>();
    public List<string> FilterList2 = new List<string>();
    public List<string> FilterList3 = new List<string>();
    
    protected void Page_Load(object sender, EventArgs e)
    {
		ScriptManager.RegisterStartupScript( UpdatePanel1, this.GetType(),"MyAction", "loadModels();", true);
		
		bool searchMatch = false;
		full_list.Controls.Clear();
		
		LoadFilter(106, powersource, 1);
		LoadFilter(509, size, 2);
		LoadFilter(514, size, 2);
		LoadFilter(115, battery, 3);
		
		//Filters
		foreach (ListItem oItem in powersource.Items)
        {
            if (oItem.Selected)
            {
				foreach(Filter f in FilterOptions1)
				{
					if(f.Name == oItem.Value)
					{
						 FilterList1.Add(f.Path);
					}
				}
            }
        }
        
		foreach (ListItem oItem in size.Items)
        {
            if (oItem.Selected)
            {
				foreach(Filter f in FilterOptions2)
				{
					if(f.Name == oItem.Value)
					{
						 FilterList2.Add(f.Path);
					}
				}
            }
        }
      
        foreach (ListItem oItem in battery.Items)
        {
            if (oItem.Selected)
            {
				foreach(Filter f in FilterOptions3)
				{
					if(f.Name == oItem.Value)
					{
						 FilterList3.Add(f.Path);
					}
				}
            }
        }
		
		LoadSeries();
		
		foreach (Series series in SeriesList)
		{
			productgrid Products = (productgrid)LoadControl("/products/productgrid.ascx");
			
			Products.TaxonomyPath = series.Path;
			Products.filters1 = FilterList1;
			Products.filters2 = FilterList2;
			Products.filters3 = FilterList3;
			
			Products.loadContent();
			
			//Do not display Series that do not have content
			if(Products.HasContent)
			{
				Literal newLiteral = new Literal();
				newLiteral.Text = "<h2 class='red_h2' style='border-bottom:1px solid #6c6c6a; margin-bottom:15px; text-transform:uppercase;'>" + series.Name + "</h2>";
				full_list.Controls.Add(newLiteral);
				full_list.Controls.Add(Products);
				searchMatch = true;
			}
		}
		
		if(searchMatch == false)
		{
			Literal newLiteral = new Literal();
			newLiteral.Text = "<div class='no_products'>No products found.</div>";
			full_list.Controls.Add(newLiteral);
		}
    }
    
    public void LoadSeries()
    {
        Taxonomy api = new Taxonomy();
        TaxonomyData tdata = new TaxonomyData();
        TaxonomyRequest treq = new TaxonomyRequest();
        EkContent tapi = new EkContent();
        TaxonomyBaseData[] tbases;

        treq.TaxonomyId = 336; //Fryer Series
        treq.TaxonomyLanguage = 1033;
        tdata = api.LoadTaxonomy(ref treq);
        tbases = api.EkContentRef.ReadAllSubCategories(treq);

        foreach (TaxonomyBaseData tbase in tbases)
        {
            Series newSeries = new Series(tbase.TaxonomyName, tbase.TaxonomyPath, tbase.TaxonomyId.ToString());
			SeriesList.Add(newSeries);
        }
    }
    
    public void LoadFilter(int TaxonomyId, CheckBoxList cbList, int listNumber)
    {
        Taxonomy api = new Taxonomy();
        TaxonomyData tdata = new TaxonomyData();
        TaxonomyRequest treq = new TaxonomyRequest();
        EkContent tapi = new EkContent();
        TaxonomyBaseData[] tbases;

        treq.TaxonomyId = TaxonomyId;
        treq.TaxonomyLanguage = 1033;
        tdata = api.LoadTaxonomy(ref treq);
        tbases = api.EkContentRef.ReadAllSubCategories(treq);

        foreach (TaxonomyBaseData tbase in tbases)
        {
			if(!IsPostBack)
			{
				ListItem li = new ListItem();
				li.Text = tbase.TaxonomyName;
				cbList.Items.Add(li);
			}
			
			Filter newFilter = new Filter(tbase.TaxonomyName, tbase.TaxonomyPath);
			
			if(listNumber == 1)
			{
				FilterOptions1.Add(newFilter);
			}
			else if(listNumber == 2)
			{
				FilterOptions2.Add(newFilter);
			}
			else
			{
				FilterOptions3.Add(newFilter);
			}
        }
    }
}

public class Series {
	private string _Name; 
	private string _Path;
	private string _ID; 
	
	public string Name
    {
        set { this._Name = value; }
        get { return this._Name; }
    } 
	
	public string Path
    {
        set { this._Path = value; }
        get { return this._Path; }
    }
	
	public string ID
    {
        set { this._ID = value; }
        get { return this._ID; }
    }
	
	public Series(){
	}
	
	public Series(string sName, string sPath, string sID){
		_Name = sName;
		_Path = sPath;
		_ID = sID;
	}
}

public class Filter {
	private string _Name; 
	private string _Path;
	
	public string Name
    {
        set { this._Name = value; }
        get { return this._Name; }
    } 
	
	public string Path
    {
        set { this._Path = value; }
        get { return this._Path; }
    }
	
	public Filter(){
	}
	
	public Filter(string sName, string sPath){
		_Name = sName;
		_Path = sPath;
	}
}
