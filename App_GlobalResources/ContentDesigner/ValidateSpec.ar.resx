<?xml version="1.0" encoding="utf-8"?>
<root>
	<!--
	
	    Microsoft ResX Schema 
    
	    Version 2.0
    
	    The primary goals of this format is to allow a simple XML format 
	    that is mostly human readable. The generation and parsing of the 
	    various data types are done through the TypeConverter classes 
	    associated with the data types.
    
	    Example:
    
	    ... ado.net/XML headers & schema ...
	    <resheader name="resmimetype">text/microsoft-resx</resheader>
	    <resheader name="version">2.0</resheader>
	    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
	    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
	    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
	    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
	    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
	        <value>[base64 mime encoded serialized .NET Framework object]</value>
	    </data>
	    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
	        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
	        <comment>This is a comment</comment>
	    </data>
                
	    There are any number of "resheader" rows that contain simple 
	    name/value pairs.
    
	    Each data row contains a name, and value. The row also contains a 
	    type or mimetype. Type corresponds to a .NET class that support 
	    text/value conversion through the TypeConverter architecture. 
	    Classes that don't support this are serialized and stored with the 
	    mimetype set.
    
	    The mimetype is used for serialized objects, and tells the 
	    ResXResourceReader how to depersist the object. This is currently not 
	    extensible. For a given mimetype the value must be set accordingly:
    
	    Note - application/x-microsoft.net.object.binary.base64 is the format 
	    that the ResXResourceWriter will generate, however the reader can 
	    read any of the formats listed below.
    
	    mimetype: application/x-microsoft.net.object.binary.base64
	    value   : The object must be serialized with 
	            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
	            : and then encoded with base64 encoding.
    
	    mimetype: application/x-microsoft.net.object.soap.base64
	    value   : The object must be serialized with 
	            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
	            : and then encoded with base64 encoding.

	    mimetype: application/x-microsoft.net.object.bytearray.base64
	    value   : The object must be serialized into a byte array 
	            : using a System.ComponentModel.TypeConverter
	            : and then encoded with base64 encoding.
	
	-->
	<xsd:schema id="root" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
	    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
	    <xsd:element name="root" msdata:IsDataSet="true">
	      <xsd:complexType>
	        <xsd:choice maxOccurs="unbounded">
	          <xsd:element name="metadata">
	            <xsd:complexType>
	              <xsd:sequence>
	                <xsd:element name="value" type="xsd:string" minOccurs="0" />
	              </xsd:sequence>
	              <xsd:attribute name="name" use="required" type="xsd:string" />
	              <xsd:attribute name="type" type="xsd:string" />
	              <xsd:attribute name="mimetype" type="xsd:string" />
	              <xsd:attribute ref="xml:space" />
	            </xsd:complexType>
	          </xsd:element>
	          <xsd:element name="assembly">
	            <xsd:complexType>
	              <xsd:attribute name="alias" type="xsd:string" />
	              <xsd:attribute name="name" type="xsd:string" />
	            </xsd:complexType>
	          </xsd:element>
	          <xsd:element name="data">
	            <xsd:complexType>
	              <xsd:sequence>
	                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
	                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
	              </xsd:sequence>
	              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
	              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
	              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
	              <xsd:attribute ref="xml:space" />
	            </xsd:complexType>
	          </xsd:element>
	          <xsd:element name="resheader">
	            <xsd:complexType>
	              <xsd:sequence>
	                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
	              </xsd:sequence>
	              <xsd:attribute name="name" type="xsd:string" use="required" />
	            </xsd:complexType>
	          </xsd:element>
	        </xsd:choice>
	      </xsd:complexType>
	    </xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
	  <value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
	  <value>2.0</value>
	</resheader>
	<resheader name="reader">
	  <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
	  <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	
	
		<data name="dlgCustom" xml:space="preserve">
	    	<value>(Custom)</value>
		</data>
		<data name="dlgName" xml:space="preserve">
	    	<value>الاسم </value>
		</data>
		<data name="dlgNBlank" xml:space="preserve">
	    	<value>لا يمكن أن يكون خاليا </value>
		</data>
		<data name="dlgNNN" xml:space="preserve">
	    	<value>رقم صحيح غير سالب أو لا شئ </value>
		</data>
		<data name="dlgNNNReqd" xml:space="preserve">
	    	<value>رقم صحيح غير سالب ( مطلوب ) </value>
		</data>
		<data name="dlgNV8n" xml:space="preserve">
	    	<value>لا يوجد تدقيق </value>
		</data>
		<data name="dlgOpt" xml:space="preserve">
	    	<value>اختياري </value>
		</data>
		<data name="sCurFld" xml:space="preserve">
	    	<value>(current field)</value>
		</data>
		<data name="sDate" xml:space="preserve">
	    	<value>Date</value>
		</data>
		<data name="sDateNReq" xml:space="preserve">
	    	<value>Date or blank</value>
		</data>
		<data name="sDateReqd" xml:space="preserve">
	    	<value>Date (required)</value>
		</data>
		<data name="sDatePast" xml:space="preserve">
	    	<value>Date in the past (or blank)</value>
		</data>
		<data name="sDatePastReqd" xml:space="preserve">
	    	<value>Date in the past (required)</value>
		</data>
		<data name="sDateFuture" xml:space="preserve">
	    	<value>Date in the future (or blank)</value>
		</data>
		<data name="sDateFutureReqd" xml:space="preserve">
	    	<value>Date in the future (required)</value>
		</data>
		<data name="sDateBefore" xml:space="preserve">
	    	<value>No later than (or blank)</value>
		</data>
		<data name="sDateAfter" xml:space="preserve">
	    	<value>No sooner than (or blank)</value>
		</data>
		<data name="sDateBeforeReqd" xml:space="preserve">
	    	<value>No later than (required)</value>
		</data>
		<data name="sDateAfterReqd" xml:space="preserve">
	    	<value>No sooner than (required)</value>
		</data>
		<data name="sCurrentDateDesc" xml:space="preserve">
	    	<value>Date when the field is validated</value>
		</data>
		<data name="sDecN" xml:space="preserve">
	    	<value>Decimal number or blank</value>
		</data>
		<data name="sDecN2Reqd" xml:space="preserve">
	    	<value>Decimal number .00 (required)</value>
		</data>
		<data name="sDecNum" xml:space="preserve">
	    	<value>Decimal number</value>
		</data>
		<data name="sEmailAddr" xml:space="preserve">
	    	<value>Email address</value>
		</data>
		<data name="sEmailAddrList" xml:space="preserve">
	    	<value>Email address list</value>
		</data>
		<data name="sEquN" xml:space="preserve">
	    	<value>Must equal another number</value>
		</data>
		<data name="sFNVar" xml:space="preserve">
	    	<value>An expression still contains a field name variable</value>
		</data>
		<data name="sFPNum" xml:space="preserve">
	    	<value>Floating point number</value>
		</data>
		<data name="sGTN" xml:space="preserve">
	    	<value>Greater than another number</value>
		</data>
		<data name="sISBN" xml:space="preserve">
	    	<value>ISBN</value>
		</data>
		<data name="sISSN" xml:space="preserve">
	    	<value>ISSN</value>
		</data>
		<data name="sLTN" xml:space="preserve">
	    	<value>Less than another number</value>
		</data>
		<data name="sMax1000Chars" xml:space="preserve">
	    	<value>Allow maximum of 1000 characters</value>
		</data>
		<data name="sMaxLen" xml:space="preserve">
	    	<value>Maximum text length</value>
		</data>
		<data name="sN2Vals" xml:space="preserve">
	    	<value>Number between two values</value>
		</data>
		<data name="sNeqN" xml:space="preserve">
	    	<value>Must not equal another number</value>
		</data>
		<data name="sNNN" xml:space="preserve">
	    	<value>Non-negative number</value>
		</data>
		<data name="sNNI" xml:space="preserve">
	    	<value>Non-negative whole number</value>
		</data>
		<data name="sOrMore" xml:space="preserve">
	    	<value>or more</value>
		</data>
		<data name="sPCCA" xml:space="preserve">
	    	<value>Postal Code (Canada)</value>
		</data>
		<data name="sPctReqd" xml:space="preserve">
	    	<value>Percent: 0-100 (required)</value>
		</data>
		<data name="sPhoneUSCA" xml:space="preserve">
	    	<value>Telephone Number (US and Canada)</value>
		</data>
		<data name="sPText" xml:space="preserve">
	    	<value>Plain text</value>
		</data>
		<data name="sPwd8StrReqd" xml:space="preserve">
	    	<value>Minimum of eight (8) characters with at least one digit</value>
		</data>
		<data name="sReqd" xml:space="preserve">
	    	<value>(required)</value>
		</data>
		<data name="sSIN" xml:space="preserve">
	    	<value>Social Insurance Number (Canada)</value>
		</data>
		<data name="sSSN" xml:space="preserve">
	    	<value>Social Security Number (U.S.)</value>
		</data>
		<data name="sTo" xml:space="preserve">
	    	<value>to</value>
		</data>
		<data name="sURL" xml:space="preserve">
	    	<value>URL</value>
		</data>
		<data name="sWhNum" xml:space="preserve">
	    	<value>Whole number</value>
		</data>
		<data name="sZIP" xml:space="preserve">
	    	<value>ZIP Code (U.S.)</value>
		</data>
		<data name="valConditn" xml:space="preserve">
	    	<value>&amp;Condition:</value>
		</data>
		<data name="valFormula" xml:space="preserve">
	    	<value>Formula:</value>
		</data>
		<data name="sMinLen" xml:space="preserve">
	    	<value>Minimum text length</value>
		</data>
		<data name="sEqu" xml:space="preserve">
	    	<value>Must equal another value</value>
		</data>
		<data name="sNoImgs" xml:space="preserve">
	    	<value>No images</value>
		</data>
		<data name="sNoScript" xml:space="preserve">
	    	<value>No script or objects</value>
		</data>
		<data name="sNoMailto" xml:space="preserve">
	    	<value>No email links</value>
		</data>
		<data name="sHtml" xml:space="preserve">
	    	<value>HTML</value>
		</data>
		<data name="sCondReqd" xml:space="preserve">
	    	<value>Conditionally required</value>
		</data>
		<data name="sMustCheck" xml:space="preserve">
	    	<value>Must be checked</value>
		</data>
		<data name="sMustUncheck" xml:space="preserve">
	    	<value>Must be unchecked</value>
		</data>
		<data name="sBool" xml:space="preserve">
	    	<value>Boolean (true/false)</value>
		</data>
</root>
